#include <frc/smartdashboard/SmartDashboard.h>

#include "subsystems/LEDSubsystem.h"

static constexpr int c_defaultLEDNum = 8;
static constexpr int c_defaultLEDOffset = 0;

LEDSubsystem::LEDSubsystem()
{
  wpi::log::DataLog& log = frc::DataLogManager::GetLog();
  m_candleConfig.stripType = LEDStripType::RGB; // set the strip type to RGB
  m_candleConfig.brightnessScalar = 1.0; // dim the LEDs to half brightness
  m_candle.ConfigAllSettings(m_candleConfig);
  m_candle.ClearAnimation(0);
  SetColor(c_colorOrange);

  m_log = wpi::log::DoubleLogEntry(log, "/subsystem/led");

  /*ctre::phoenix::ErrorCode error =*/ m_candle.GetLastError(); // gets the last error generated by the CANdle

  CANdleFaults faults;
  /*ctre::phoenix::ErrorCode faultsError =*/ m_candle.GetFaults(faults); // fills faults with the current CANdle faults; returns the last error generated

  // printf("candle error: %d", error);
  // printf("candle fault: %d", faultsError);
  m_alliance = frc::DriverStation::GetAlliance();
}

void LEDSubsystem::Periodic()
{
  bool robotEnabled = frc::SmartDashboard::GetBoolean("Robot Enabled", false);
  if (robotEnabled)
  {
      if (!IsRobotBusy())
      {
        SetAnimation(GetDefaultColor(), LEDSubsystem::kSolid);
      }
  }
  else
  {
    // Robot is disabled, turn red
    if (m_alliance == frc::DriverStation::kBlue)
    {
      if (!IsSameColor(m_currentColor, c_colorBlue))
        SetAnimation(c_colorBlue, LEDSubsystem::kFlow);
    }
    else if (!IsSameColor(m_currentColor, c_colorRed))
    {
      SetAnimation(c_colorRed, LEDSubsystem::kFlow);
    }
  }

  // m_log.Append(add_data_here);
}

void LEDSubsystem::SetAnimation(RBGAColor color, EAnimation animate)
{
  //printf("LEDSubsystem::SetAnimation color %d %d %d animation %d\n", color.red, color.green, color.blue, animate);
  switch (animate)
  {
    case (EAnimation::kSolid):
      m_candle.ClearAnimation(0);
      SetColor(color);
      break;

    case (EAnimation::kFade):
      SetColor(m_singleFadeAnimation, color);
      m_candle.Animate(m_singleFadeAnimation);
      break;

    case (EAnimation::kFlow):
      SetColor(m_colorFlowAnimation, color);
      m_candle.Animate(m_colorFlowAnimation);
      break;

    case (EAnimation::kStrobe):
      SetColor(m_strobeAnimation, color);
      m_candle.Animate(m_strobeAnimation);
      break;
    
    case (EAnimation::kScanner):
      SetColor(m_larsonAnimation, color);
      m_candle.Animate(m_larsonAnimation);
      break;
    
    default:
      m_candle.ClearAnimation(0);
      SetColor(color);
      break;
  }
}